


# Variable Declearation and Initialization


program -> statements
statements -> _ statement _ {% data => [data[1]] %} 
| statement _ "\n" statements {% data => [data[1] , ...data[4]] %}

statement ->  variable_Declare_Initialization | for_loop | while_loop 


variable_Declare_Initialization -> type __ identifier _ new_d _ ";"  {%
data => {
    return {
        type : "Variable Declaration",
        dataType : data[0],
        variable_name  : data[2],
        multiple_declaration  : data[4],
    }
}
%}

| type _ identifier _ "=" _ value _ new_i ";" {%
data => {
    return {
        type : "Variable Initialization",
        dataType : data[0],
        variable_name  : data[2],
        value  : data[6],
        multiple_initialization  : data[8],

    }
}
%}
new_d -> _ ","  _ identifier new_d  {%
data => {
    return {
        type : "new declaration",        
        variable_name  : data[3],        
        nested_Declaration  : data[4],        
    }
}
%}

| _ {% id %}

new_i -> _ ","  _ identifier _ "=" _ value new_i  

{%
data => {
    return {
        type : "new Initialization",        
        variable_name  : data[4],        
        value  : data[8],
        nested_Initialization  : data[9],        
    }
}
%}


| _ {% id %}



identifier -> letter  {% id %} | identifier letter  {% id %} | identifier digit {% id %}
value -> integer {% id %} | float {% id %} | string {% id %} | char_literal {% id %} | boolean {% id %}
 
digit -> [0-9]:+  {% data => data[0].join("") %}
letter -> [a-z]:+  {% data => data[0].join("") %}
character -> [^\"]  {% data => data[0].join("") %}

boolean -> "true" {% () => true %} | "false" {% () => false %}  
 


type -> "int" {% id %} | "float"  {% id %} | "char" {% id %} | "bool" {% id %}


integer -> digit {% data => Number(data[0])  %}  
float -> integer "." integer {% data => Number(data[0] + "." + data[2]) %}
char_literal -> "'" character "'" {% id %}

string_characters -> letter | integer | float  |  character |  letter string_characters | character string_characters   | float string_characters

string -> "'" string_characters "'" {% id %}



# Loop

for_loop -> "for" "(" for_init ";" _ expression ";" _ counter ")" "{" block "}" 
{% data => { return {
        type : "For Loop",        
        for_init  : data[2],        
        expression  : data[5],
        counter  : data[8],   } } %}

for_init -> assignment  

{% data => { return {
        type : "For init assignment",        
        assignment  : data[0],   } } %}

| declaration

{% data => { return {
        type : "For init declaration",        
        declaration  : data[0],  } } %}

assignment -> type _ identifier _ "=" _ int_value
declaration -> type identifier
counter -> identifier operator
operator -> inc | dec
inc -> "++"
dec -> "--"

expression -> identifier _  relational_Operator _ int_value | identifier _  relational_Operator _ int_value  _ logical_operator _ expression  | null
int_value -> integer 

relational_Operator -> "<" | "<=" | ">" | ">=" | "==" | "!="
logical_operator -> "OR" | "AND" | "NOT" 

while_loop -> "while" "(" expression ")" "{" block "}" 
 {% data => { return {
        type : "While Loop",            
        expression  : data[2], } } %}

block ->  "code..." 
 

_ -> [ ]:* {% id %}
__ -> [ ]:+ {% id %}
